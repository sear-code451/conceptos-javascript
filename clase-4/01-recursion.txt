        RECURSIÓN

Una recursión es cuando se llama a sí misma en una función y cumple los sgte requisitos en su mayorìa:

    se llama a sí misma (si o si porque si no no es recursión).

    tiene una condición de corte(el if del ejemplo para que no sea un bucle infinito).

    en general el argumento con el cual se llama a la función es nuevamente distinto al del argumento original.

Un ejemplo claro es como hacer factorial vamos a pillar 2 formas de hacerlo uno es el más facil, y el otro haciendo uso de recursión:

´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´
result = 1;

function factorial(num) {
    for(let i = 1; i <= num; i++) {
        result = i * result;
    }
    return result;
}

factorial(4);  // 24

´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´´

function factorialRec(num) {
    if(num <= 1) return 1
        return num * factorialRec( num - 1 );
}

console.log(factorialRec(4));   // 24

secuencia: 4! = 1 x 2 x 3 x 4

Secuencia:  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... 

Lo que está haciendo if es lo sgte:

es que va hacer una recursión osea pregunta si es menor si cumple lo que dice el if entonces va retornar 1  tipo while pero la diferencia es que aca nosotros sabemos cuando va acabar.

OJO: ES IMPORTANTE PONERLE UN STOP UN PUNTO LÍMITE SINO ESTO SE HARIA UN BUCLE

PROCESO DE LO QUE HACE EL IF :

pregunta si num (4) es menor o igual que 1 // la respuesta es false

entonces lo que hace es lo de abajo

ahora lo de abajo hace que (4) * factorialRec( 4 - 1 );

esa parte donde se llama a sí misma crea como un stack context una pila de ejecución

para que se entienda el primero en entrar a la pila será con el num (4)

pero será el último en ser ejecutado entonces hasta que no se termine de colocar todos en la pila aún no pueden ser ejecutados

PROCESO EN QUE ORDEN VA ENTRANDO EN LA PILA DE EJECUCION:
1º            pregunta 4 es menor o igual que 1  // false = osea continua
    (4) * factorialRec( 4 - 1 );

2º            pregunta 3 es menor o igual que 1  // false = osea continua
    (3) * factorialRec( 3 - 1 );

3º            pregunta 2 es menor o igual que 1  // false = osea continua
    (2) * factorialRec( 2 - 1 );

4º       pregunta 1 es menor o igual que 1   // true = osea va retornar 1
            1


PROCESO DE COMO VAN SIENDO EJECUTADOS LOS CONTEXTO DE EJECUCION QUE ESTABAN EN LA PILA DE EJECUCION:

1º (primero en ser ejecutado)

    return 1
    1

2º (segundo en ser ejecutado)

    return (2) * factorialRec( 1 );
    return 2 * 1;   //2
    2

3º (tercero en ser ejecutado)

    return (3) * factorialRec( 3 - 1 );
    return  3 * 2;      // 6
    6

4º (cuarto en ser ejecutado)

    return (4) * factorialRec( 4 - 1 );
    return 4 * 6;   // 24
    24


